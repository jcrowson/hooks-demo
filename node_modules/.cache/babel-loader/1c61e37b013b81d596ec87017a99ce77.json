{"ast":null,"code":"import _slicedToArray from \"/Users/jcrowson/Documents/hooks-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport useAudioPlayer from \"./useAudioPlayer\";\n\nvar useProgress = function useProgress() {\n  var _useAudioPlayer = useAudioPlayer(),\n      isPlaying = _useAudioPlayer.isPlaying;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      progress = _useState2[0],\n      setProgress = _useState2[1];\n\n  useEffect(function () {\n    var progressTimer;\n    progressTimer = setInterval(function () {\n      console.log('progress timer', progress);\n      setProgress(progress + 1);\n    }, 1000);\n    return function () {\n      if (progressTimer) {\n        clearInterval(progressTimer);\n      }\n    };\n  });\n  return {\n    progress: progress\n  };\n};\n\nexport default useProgress;","map":{"version":3,"sources":["/Users/jcrowson/Documents/hooks-demo/src/useProgress.js"],"names":["useState","useEffect","useAudioPlayer","useProgress","isPlaying","progress","setProgress","progressTimer","setInterval","console","log","clearInterval"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,wBACFD,cAAc,EADZ;AAAA,MAChBE,SADgB,mBAChBA,SADgB;;AAAA,kBAEQJ,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,MAEjBK,QAFiB;AAAA,MAEPC,WAFO;;AAIxBL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,aAAJ;AACEA,IAAAA,aAAa,GAAGC,WAAW,CAAC,YAAM;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,QAA9B;AACAC,MAAAA,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX;AACD,KAH0B,EAGxB,IAHwB,CAA3B;AAIA,WAAO,YAAM;AACX,UAAIE,aAAJ,EAAmB;AACjBI,QAAAA,aAAa,CAACJ,aAAD,CAAb;AACD;AACF,KAJD;AAKH,GAXQ,CAAT;AAaA,SAAO;AACLF,IAAAA,QAAQ,EAARA;AADK,GAAP;AAGD,CApBD;;AAsBA,eAAeF,WAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport useAudioPlayer from \"./useAudioPlayer\";\n\nconst useProgress = () => {\n  const { isPlaying } = useAudioPlayer();\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    let progressTimer;\n      progressTimer = setInterval(() => {\n        console.log('progress timer', progress);\n        setProgress(progress + 1);\n      }, 1000);\n      return () => {\n        if (progressTimer) {\n          clearInterval(progressTimer)\n        }\n      }\n  });\n\n  return {\n    progress,\n  }\n};\n\nexport default useProgress;\n"]},"metadata":{},"sourceType":"module"}