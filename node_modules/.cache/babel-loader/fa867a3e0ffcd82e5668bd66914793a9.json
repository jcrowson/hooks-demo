{"ast":null,"code":"import _slicedToArray from \"/Users/jcrowson/Documents/hooks-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useContext, useState, useEffect } from 'react';\nimport AppContext from './AppContext';\n\nvar useProgress = function useProgress() {\n  var _useContext = useContext(AppContext),\n      state = _useContext.state,\n      setState = _useContext.setState;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      progress = _useState2[0],\n      setProgress = _useState2[1];\n\n  useEffect(function () {\n    if (state.isPlaying) {\n      var progressTimer = setInterval(function () {\n        console.log('progress timer', progress);\n        setProgress(progress + 1);\n      }, 1000);\n      return function () {\n        clearInterval(progressTimer);\n      };\n    }\n  }, [state.isPlaying]);\n  return {\n    progress: progress\n  };\n};\n\nexport default useProgress;","map":{"version":3,"sources":["/Users/jcrowson/Documents/hooks-demo/src/useProgress.js"],"names":["useContext","useState","useEffect","AppContext","useProgress","state","setState","progress","setProgress","isPlaying","progressTimer","setInterval","console","log","clearInterval"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,oBACIJ,UAAU,CAACG,UAAD,CADd;AAAA,MAChBE,KADgB,eAChBA,KADgB;AAAA,MACTC,QADS,eACTA,QADS;;AAAA,kBAEQL,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,MAEjBM,QAFiB;AAAA,MAEPC,WAFO;;AAIxBN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,KAAK,CAACI,SAAV,EAAqB;AACnB,UAAMC,aAAa,GAAGC,WAAW,CAAC,YAAM;AACtCC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,QAA9B;AACAC,QAAAA,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX;AACD,OAHgC,EAG9B,IAH8B,CAAjC;AAIA,aAAO,YAAM;AACXO,QAAAA,aAAa,CAACJ,aAAD,CAAb;AACD,OAFD;AAGD;AACF,GAVQ,EAUN,CAACL,KAAK,CAACI,SAAP,CAVM,CAAT;AAYA,SAAO;AACLF,IAAAA,QAAQ,EAARA;AADK,GAAP;AAGD,CAnBD;;AAqBA,eAAeH,WAAf","sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport AppContext from './AppContext';\n\nconst useProgress = () => {\n  const { state, setState } = useContext(AppContext);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    if (state.isPlaying) {\n      const progressTimer = setInterval(() => {\n        console.log('progress timer', progress);\n        setProgress(progress + 1);\n      }, 1000);\n      return () => {\n        clearInterval(progressTimer)\n      }\n    }\n  }, [state.isPlaying]);\n\n  return {\n    progress,\n  }\n};\n\nexport default useProgress;\n"]},"metadata":{},"sourceType":"module"}